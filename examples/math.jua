fn abs(n) = (n < 0) ? -n : n;

fn int_fact(n) {
    var m = 1;
    for var i = n; i > 1; i-- {
        m *= i;
    }
    return m;
}

fn test_int_fact() {
    assert_eq(int_fact(0), 1,   "0!");
    assert_eq(int_fact(1), 1,   "1!");
    assert_eq(int_fact(2), 2,   "2!");
    assert_eq(int_fact(3), 6,   "3!");
    assert_eq(int_fact(4), 24,  "4!");
    assert_eq(int_fact(5), 120, "5"!");
}

const MATH_E = 2.718281828459045;
const MATH_PI = 3.141592653589793;
const MATH_TAU = MATH_PI * 2;

const _D2R = MATH_PI / 180;
const _R2D = 180 / MATH_PI;

fn rad(deg) = deg * _D2R;
fn deg(rad) = rad * _R2D;

fn int_pow(base, power) {
    var negative = false;
    if (power < 0) {
        negative = true;
        power = -power;
    }
    var result = 1.0;
    while (power > 0) {
        if ((power & 1) != 0) {
            result *= base;
        }
        base *= base;
        power >>= 1;
    }
    return negative ? 1.0 / result : result;
}

fn test_int_pow() {
    assert_eq(int_pow(0, 0),  1,    "0^0");
    assert_eq(int_pow(0, 1),  1,    "0^1");
    assert_eq(int_pow(1, 2),  1,    "1^2");
    assert_eq(int_pow(2, 3),  1,    "2^3");
    assert_eq(int_pow(2, -2), 0.25, "2^-2");
}

fn cos(x) {
    var result = 0;
    for var i = 0; i < 7; i++ {
        result += int_pow(-1, i) * int_pow(x, 2 * i) / int_fact(2 * i);
    }
    return result;
}

fn sin(x) {
    var result = 0;
    for var i = 0; i < 7; i++ {
        result += int_pow(-1, i) * int_pow(x, 2 * i + 1) / int_fact(2 * i + 1);
    }
    return result;
}