fn queue_create(size)
    = [
        list(size),
        0,
        0
    ];

fn _queue_elements(queue) = queue[0];
fn _queue_head(queue) = queue[1];
fn _queue_set_head(queue, head) { queue[1] = head; }
fn _queue_tail(queue) = queue[2];
fn _queue_set_tail(queue, tail) { queue[2] = tail; }
fn _queue_tail_inc(queue) { queue[2]++; }
fn _queue_tail_dec(queue) { queue[2]--; }
fn _queue_head_inc(queue) { queue[1]++; }
fn _queue_head_dec(queue) { queue[1]--; }

fn queue_capacity(queue) = length(_queue_elements(queue));

fn queue_count(queue) = (_queue_tail(queue) - _queue_head(queue));

/*
 * Elements: [X, _, _, _] | [Y, X, _, _]
 * Head:      ^           |  ^
 * Tail:            ^     |        ^
 */
fn queue_add_first(queue, element) {
    var e = _queue_elements(queue);
    var h = _queue_head(queue);
    if h > 0 {
        h--;
        _queue_head_dec(queue);
    } else {
        for var i = queue.tail; i > h; i-- {
            e[i + 1] = e[i];
        }
    }
    e[h] = element;
}

/*
 * Elements: [X, _, _, _] | [X, Y, _, _]
 * Head:      ^           |  ^
 * Tail:         ^        |        ^
 */
fn queue_add_last(queue, element) {
    _queue_elements(queue)[_queue_tail(queue)] = element;
    _queue_tail_inc(queue);
}

/*
 * Elements: [X, Y, _, _] | [_, Y, _, _]
 * Head:      ^           |     ^
 * Tail:            ^     |        ^
 */
fn queue_remove_first(queue) {
    var h = _queue_head(queue);
    _queue_head_inc(queue);
    var e = _queue_elements(queue)[h];
    _queue_elements(queue)[h] = null;
    return e;
}

/*
 * Elements: [X, Y, _, _] | [X, _, _, _]
 * Head:      ^           |  ^
 * Tail:            ^     |     ^
 */
fn queue_remove_last(queue) {
    _queue_tail_dec(queue);
    var t = _queue_tail(queue);
    var e = _queue_elements(queue)[t];
    _queue_elements(queue)[t] = null;
    return e;
}

fn queue_peek_first(queue) = _queue_elements(queue)[_queue_head(queue)];

fn queue_peek_last(queue) = _queue_elements(queue)[_queue_tail(queue) - 1];