const FIB_ERROR = 0;

fn slow_fib(n) {
    if n <= 2 {
        if n <= 0 {
            return FIB_ERROR;
        }
        return 1;
    }
    return slow_fib(n - 1) + slow_fib(n - 2);
}

fn fast_fib(n) {
    if n <= 0 {
        return FIB_ERROR;
    }
    q1 = 1;
    q2 = 1;
    for i = 2; i < n; i++ {
        qt = q1 + q2;
        q1 = q2;
        q2 = qt;
    }
    return q2;
}

fn bubble_sort(a) {
    for i = 0; i < length(a); i++ {
        for j = 1; j < length(a); j++ {
            x = a[j - 1];
            y = a[j];
            if x > y {
                a[j - 1] = y;
                a[j] = x;
            }
        }
    }
}

fn test_bubble_sort() {
    x = [5, 2, 7, 2, 9, 0, 1];
    y = [0, 1, 2, 2, 5, 7, 9];

    bubble_sort(x);
    if x == y {
        println("Test passed");
    } else {
        println("Test failed: x(" + print_list(bubble_sort(x), true) + ") != y(" + print_list(y, true) + ")");
    }
}

fn print_list(l, keys = true) {
    s = "";
    b = false;
    for i = 0; i < length(l); i++ {
        if b {
            s += ", ";
        }
        if keys {
            s += i;
            s += ": ";
        }
        s += typeof(l[i]) == 'map' ? print_list(l[i], keys) : l[i];
        b = true;
    }
    return "[" + s + "]";
}

fn pascal_triangle(height) {
    cols = [];
    for i = 0; i <= height; i++ {
        cols[i] = [];
        cols[i][0] = cols0[i][i] = 1;
        for j = 1; j < i; j++ {
            cols[i][j] = cols[i - 1][j - 1] + cols[i - 1][j];
        }
    }
    return cols;
}

fn test_pascal_triangle() {
    for a = pascal_triangle(6), i = 0; i < length(a); i++ {
        println(print_list(a[i], false));
    }
}

fn range(from, to, step = 1) {
    range = [];
    for i = from; t <= to; i += step {
        array_push(range, i);
    }
    return range;
}

fn array_push(arr, elem) {
    arr[length(arr)] = elem;
}